use sfml::window::Key;
use std::collections::HashMap;

pub const TOTAL_BUTTONS: usize = 8;
const BUTTONS: &'static [&str] = &["a", "b", "select", "start", "up", "down", "left", "right"];
const KEYBOARD_KEYS: &'static [&str] = &[
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "Num0",
  "Num1",
  "Num2",
  "Num3",
  "Num4",
  "Num5",
  "Num6",
  "Num7",
  "Num8",
  "Num9",
  "Escape",
  "LControl",
  "LShift",
  "LAlt",
  "LSystem",
  "RControl",
  "RShift",
  "RAlt",
  "RSystem",
  "Menu",
  "LBracket",
  "RBracket",
  "SemiColon",
  "Comma",
  "Period",
  "Quote",
  "Slash",
  "BackSlash",
  "Tilde",
  "Equal",
  "Dash",
  "Space",
  "Return",
  "BackSpace",
  "Tab",
  "PageUp",
  "PageDown",
  "End",
  "Home",
  "Insert",
  "Delete",
  "Add",
  "Subtract",
  "Multiply",
  "Divide",
  "Left",
  "Right",
  "Up",
  "Down",
  "Numpad0",
  "Numpad1",
  "Numpad2",
  "Numpad3",
  "Numpad4",
  "Numpad5",
  "Numpad6",
  "Numpad7",
  "Numpad8",
  "Numpad9",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "F11",
  "F12",
  "F13",
  "F14",
  "F15",
  "Pause",
];

const KEYS: &'static [Key] = &[
  Key::A,
  Key::B,
  Key::C,
  Key::D,
  Key::E,
  Key::F,
  Key::G,
  Key::H,
  Key::I,
  Key::J,
  Key::K,
  Key::L,
  Key::M,
  Key::N,
  Key::O,
  Key::P,
  Key::Q,
  Key::R,
  Key::S,
  Key::T,
  Key::U,
  Key::V,
  Key::W,
  Key::X,
  Key::Y,
  Key::Z,
  Key::NUM0,
  Key::NUM1,
  Key::NUM2,
  Key::NUM3,
  Key::NUM4,
  Key::NUM5,
  Key::NUM6,
  Key::NUM7,
  Key::NUM8,
  Key::NUM9,
  Key::ESCAPE,
  Key::LCONTROL,
  Key::LSHIFT,
  Key::LALT,
  Key::LSYSTEM,
  Key::RCONTROL,
  Key::RSHIFT,
  Key::RALT,
  Key::RSYSTEM,
  Key::MENU,
  Key::LBRACKET,
  Key::RBRACKET,
  Key::SEMICOLON,
  Key::COMMA,
  Key::PERIOD,
  Key::QUOTE,
  Key::SLASH,
  Key::BACKSLASH,
  Key::TILDE,
  Key::EQUAL,
  Key::HYPHEN,
  Key::SPACE,
  Key::ENTER,
  Key::BACKSPACE,
  Key::TAB,
  Key::PAGEUP,
  Key::PAGEDOWN,
  Key::END,
  Key::HOME,
  Key::INSERT,
  Key::DELETE,
  Key::ADD,
  Key::SUBTRACT,
  Key::MULTIPLY,
  Key::DIVIDE,
  Key::LEFT,
  Key::RIGHT,
  Key::UP,
  Key::DOWN,
  Key::NUMPAD0,
  Key::NUMPAD1,
  Key::NUMPAD2,
  Key::NUMPAD3,
  Key::NUMPAD4,
  Key::NUMPAD5,
  Key::NUMPAD6,
  Key::NUMPAD7,
  Key::NUMPAD8,
  Key::NUMPAD9,
  Key::F1,
  Key::F2,
  Key::F3,
  Key::F4,
  Key::F5,
  Key::F6,
  Key::F7,
  Key::F8,
  Key::F9,
  Key::F10,
  Key::F11,
  Key::F12,
  Key::F13,
  Key::F14,
  Key::F15,
  Key::PAUSE,
];

fn parse_one_player(keys: &HashMap<String, Option<String>>) -> Vec<Key> {
  let mut res = vec![Key::A; TOTAL_BUTTONS + 1];
  for (k, v) in keys {
    if let None = v {
      continue;
    }
    let v = v.as_ref().unwrap();
    let maybe_button = BUTTONS.iter().position(|&e| e == k);
    let maybe_key = KEYBOARD_KEYS.iter().position(|&e| e == v);
    if let Some(button) = maybe_button {
      if let Some(key) = maybe_key {
        res[button] = KEYS[key];
      }
    }
  }
  res
}

pub fn parse_key_binding(file: &str) -> (Vec<Key>, Vec<Key>) {
  let file = ini!(file);
  (
    parse_one_player(&file["player1"]),
    parse_one_player(&file["player2"]),
  )
}

mod test {
  #[test]
  fn parse_test() {
    let (player1, _) =
      crate::controller::key_binding_parser::parse_key_binding("./assets/keybindings.ini");
    for key in player1 {
      print!("{:?} ", key);
    }
  }
}
